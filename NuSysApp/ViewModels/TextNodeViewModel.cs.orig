<<<<<<< HEAD
﻿using NuStarterProject.Views;
using System.Collections.ObjectModel;
=======
﻿using System;
>>>>>>> 05a81f528d8dff4ccb337d718c5954cb7bdbb425
using Windows.Foundation;
using Windows.UI;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Media;
namespace NuStarterProject
{
    public class TextNodeViewModel : NodeViewModel
    {
        #region Private Members
        private TextNode _node;
        private WorkspaceViewModel _workSpaceViewModel;
        private string _data;
<<<<<<< HEAD

        //collection of links
        private ObservableCollection<BezierLink> _linklist;

=======
        private UserControl _view;
>>>>>>> 05a81f528d8dff4ccb337d718c5954cb7bdbb425
        #endregion Private Members
        public TextNodeViewModel(WorkspaceViewModel workSpaceViewModel): base(workSpaceViewModel)
        {
            _node = new TextNode("Hello oOrld", 0);
            this.Data = "Enter text here";
            this.Transform = new MatrixTransform();
            this.Width = Constants.DEFAULT_NODE_SIZE;
            this.Height = Constants.DEFAULT_NODE_SIZE;
            this.IsSelected = false;
            this.IsEditing = false;
<<<<<<< HEAD
            _view = new TextNodeView(this);
            _linklist = new ObservableCollection<BezierLink>();
        }

        #region Node Manipulations

        public void DeleteNode()
        {
            _workSpaceViewModel.DeleteNode(this);
        }
        public void Translate(double dx, double dy)
        {
            Matrix transMat = ((MatrixTransform)this.View.RenderTransform).Matrix;
            transMat.OffsetX += dx;
            transMat.OffsetY += dy;
            this.Transform = new MatrixTransform();
            this.Transform.Matrix = transMat;
            this.updateAnchor();
            
        }

        public void updateAnchor()
        {
            this.AnchorX = (int)(this.X + this.Transform.Matrix.OffsetX + this.Width/2);
            this.AnchorY = (int)(this.Y + this.Transform.Matrix.OffsetY + this.Height/2);
            this.Anchor = new Point(this.AnchorX, this.AnchorY);
            foreach (BezierLink link in _linklist)
            {
                link.UpdateControlPoints();
            }
        }

        public void Resize(double dx, double dy)
        {
            this.Width += dx;
            this.Height += dy;
            this.updateAnchor();
        }
        
        public void ToggleSelection()
        {
            this.IsSelected = !this.IsSelected;
            _workSpaceViewModel.SetSelection(this); 
        }

        public void ToggleEditing()
        {
            this.IsEditing = !this.IsEditing;
=======
            this.View = new TextNodeView(this);
>>>>>>> 05a81f528d8dff4ccb337d718c5954cb7bdbb425
        }

        #region Public Properties

        public string Data
        {
            get { return _data; }
            set
            {
                _data = value;
                RaisePropertyChanged("Data");
            }
        }

        public override UserControl View
        {
            get { return _view; }
            set
            {
                if (_view == value)
                {
                    return;
                }

                _view = value;

                RaisePropertyChanged("View");
            }
        }

<<<<<<< HEAD
        public Point Anchor
        {
            get
            {
                return _anchor;
            } set
            {
                if (_anchor == value)
                {
                    return;
                }
                _anchor = value;
                RaisePropertyChanged("Anchor");
            }
        }

        public ObservableCollection<BezierLink> GetLinkList()
        {
            return _linklist;
        }

        public void AddLink(BezierLink link)
        {
            _linklist.Add(link);
        }

        
=======
       
>>>>>>> 05a81f528d8dff4ccb337d718c5954cb7bdbb425
        #endregion Public Properties
    }
}
